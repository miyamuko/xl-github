2010-09-22  MIYAMUKO Katsuyuki

	* api/types.l: gist-public-clone-url などが動いていなかったのを修正。

2010-09-21  MIYAMUKO Katsuyuki

	* api/types.l (public-key): public-key 構造体の key スロットの名前を body に変更。
	public-key-key => public-key-body

	* util/struct.l (struct-slot-accessor): export-struct でエラーになっていたのを修正
	スロット名をキーワードじゃなくて構造体名のシンボルが
	所属するパッケージに intern するようにした。

2010-09-06  MIYAMUKO Katsuyuki

	* api/base.l (with-credential): 一時的に github の user と token
	を切り替えるためのマクロ

	* api/base.l (refresh-credential): git config を変更した場合に
	キャッシュをクリアするための関数を追加

	* api/base.l (get-credential-login): git config の github.user を
	取得する関数を export

2010-09-03  MIYAMUKO Katsuyuki

	* utils/pubkey.l, api/base.l, api/user.l, api/repo.l: ファイルから公開鍵を登録できるようにした
	- add-repo-key-file
	- add-user-key-file
	以下の公開鍵のフォーマットをサポートする
	- RFC 4716 形式のファイル (puttygen などで生成した公開鍵)
	- OpenSSH 形式 (authorized_keys に書く形式、puttygen でも変換可能)

	* api/types.l: GitHub の URL を返す API を追加

	* user/repo => owner/repo

	* 引数の型チェックを追加

	* api/issues.l, api/types.l: 引数名を変更: number => issue

	* api/issues.l (add-issue-label, delete-issue-label): 引数の順番を変更

2010-09-02  MIYAMUKO Katsuyuki

	* user と repo 引数にとる関数の引数を変更して以下を引数に取るようにした
	- "<user>/<repo>" という文字列
	- '("<user>" "<repo>") というリスト
	- repo 構造体

	* api/issues.l, api/types.l: issue number を引数にとる関数には
	issue 構造体も指定できるようにした。

	* api/user.l, api/repo.l, api/types.l: public-key id を引数にとる関数には
	public-key 構造体も指定できるようにした。

2010-08-31  MIYAMUKO Katsuyuki

	* api/user.l, api/gist.l: ユーザ名を引数に指定する関数には
	user 構造体も指定できるようにした。

	* api/types.l: user 構造体の name を fullname に変更。
	アクセッサが ed::user-name とかぶるのを防ぐのと
	user-login と user-name の区別を付けやすくするため。

	* api/gist-unofficial.l, api/gist.l: id を引数に指定する関数には
	gist 構造体も指定できるようにした。

	* api/type.l: fork したリポジトリを show-repo するとエラーになっていたのを修正
	(repo 構造体に source と parent を追加)。

	* api/gist-unofficial.l (gist-star-p): fork 関連の API を追加
	- fork-gist
	- gist-fork-p
	- get-gist-parent
	- list-gist-forks

	* api/gist-unofficial.l (gist-star-p): star-gist-p を gist-star-p
	に変えた

2010-08-21  MIYAMUKO Katsuyuki

	* api/gist-unofficial.l (create-gist-files, update-gist-files): 複数のファイルの
	Gist を作成・更新するための関数
	- 引数の files には gist-file 構造体のリストを指定する
	- 文字列を指定した場合はファイル名として扱う
	  - 実際のファイル名とは別の名前で Gist を作成したい場合は
	    make-gist-file-from-pathname を使う
	- 引数が 1 つの場合はわざわざリストにする必要はない
	---
	(create-gist-files "~/.xyzzy")
	(create-gist-files (list (make-gist-file-from-pathname "~/.xyzzy" :name "my-dot-xyzzy.cl")
	                         (make-gist-file-from-pathname "~/.emacs" :lang :lisp))
	                   :private t)

	* api/gist-unofficial.l (create-gist, update-gist): 1 ファイルの Gist を
	作成・更新するための関数
	- 引数の name を keyword 引数に変更
	- lang をキーワード引数に追加
	  - 拡張子または言語名を指定する（あいまいでない限り省略可能）
	  - 言語を一意に特定できない場合は error を通知
	  - 言語が不明な場合は警告を出力して txt として扱う
	---
	(let ((id (create-gist "(format t \"Hello World\")" :lang :lisp)))
	  (update-gist id "(format t \"Hello World 2\")" :name "hello.cl"))

	* api/types.l (gist-file): create-gist-files, update-gist-files で使う
	gist の中身をあらわす構造体

	* api/gist-filetype.l: Gist の Language まわり

	* utils/file.l (pathname-ext): pathname-type に dot を追加したもの

	* utils/file.l (add-leading-dot): 文字列の先頭に dot がなければ
	追加する関数

2010-08-20  MIYAMUKO Katsuyuki

	* utils/file.l (normalize-filename): ファイルの存在チェック。
	ed::find-file-internal と同じ処理

	* utils/file.l (read-file-contents): utils/process.l から移動

	* api/gist-unofficial.l (gist-get): gist-get を導入してリファクタリング

2010-08-19  MIYAMUKO Katsuyuki

	* api/types.l (gist-public-clone-url, gist-private-clone-url gist-embed-js-url):
	Gist リポジトリの URL を返すアクセッサを追加

	* api/types.l (repo-public-clone-url, repo-private-clone-url)
	(repo-public-clone-url-http, repo-private-clone-url-https):
	リポジトリの URL を返すアクセッサを追加

	* api/commits.l, api/issues.l, api/network.l, api/object.l,
	api/repo.l, api/users.l: 非同期 API を追加した

	* http.l (get-response-text): 非同期実行時は HTTP ステータスが 200 番
	以外の場合でも例外は投げないようにした。
	非同期実行の場合は *Trace Output* に警告を出力し nil を返す。

	* util/function.l (tap): デバッグ用の関数。compose の途中にはさんで値を除き見る
	(funcall (compose '1+ (tap "before 1+") '*  (tap "before *")) 1 2 3)

2010-08-18  MIYAMUKO Katsuyuki

	* api/gist-unofficial.l: 非同期 API を追加した

	* util/function.l (nothing): すべての引数を無視して nil を返す関数

2010-08-16  MIYAMUKO Katsuyuki

	* api/gist.l: 非同期 API を追加した
	(list-public-gists "miyamuko"
	                   :callback #'(lambda (gists)
	                                 (msgbox "~D個のGistsがあります" (length gists))))

2010-08-13  MIYAMUKO Katsuyuki

	* (list-all-gists, list-starred-gists list-my-gists): Gist の一覧を
	取得する API を追加。
	gist 構造体のリストと次のページのページ番号を多値で返す。

	* 検索結果を保持する構造体と他の構造体で似ているスロットは
	名前などをできる限り合わせるようにした

	* 検索結果を保持する構造体名を変更
	users => searched-user
	repos => searched-repo

	* 構造体のアクセッサと API を区別しにくいので、API は動詞で
	始めるようにした。
	また、シンボル名には github- という prefix を付けないようにした。
	例) github-repos-show => show-repo

2010-08-12  MIYAMUKO Katsuyuki

	* api/network.l: JSON オブジェクトではなく構造体を返すようにした

	* api/gist-unofficial.l (gist-mine, gist-mine1): 関数名を変更
	- gist-id-list-all => gist-mine
	- gist-id-list     => gist-mine1

	* api/gist-unofficial.l (gist-revisions, gist-star-p): 関数を追加
	- gist-revisions: Gist のリビジョンの sha1 のリストを返す
	- gist-star-p: Gist にスターをつけたなら t

	* api/gist.l (gist-meta, gist-list): JSON オブジェクトではなく構造体を返すようにした

2010-08-11  MIYAMUKO Katsuyuki

	* api/repo.l, api/user.l: JSON オブジェクトではなく構造体を返すようにした

	* api/types.l: github-public-key などは repo.l と user.l から使うため、
	構造体の定義は types.l にまとめるようにした。

	* api/issues.l: JSON オブジェクトではなく構造体を返すようにした

2010-08-07  MIYAMUKO Katsuyuki

	* api/commits.l: ↓と同じ

	* api/object.l: ↓と同じ

	* api/user.l: JSON オブジェクトではなく構造体を返すようにした

	* (github-user-search-by-email, github-users-search): email 指定の
	検索は単一のユーザを返し、query 指定の検索は複数のユーザを返すので
	関数を分けた

2010-07-29  MIYAMUKO Katsuyuki

	* (gist-id-list-all, gist-id-list): 自分の Gist の ID の一覧を取得
	する関数を追加。
	Gist の API では Public な Gist しか取得できないので、Web ページを
	スクレイピングして Public と Private な Gist の ID を取得する。

	* (github-get, github.post): WinHTTP を利用するようにした。
	Gist のブラウザ向けインターフェイスは query の login/token の指定より
	Cookie にあるセッション ID のほうを優先するので Msxml2.XMLHTTP は利用できない。

	* package.l: xml-http-request 1.3.0 以上が必要なので
	バージョンチェックを追加

2010-07-28  MIYAMUKO Katsuyuki

	* api/gist-unofficial.l: Gist API が足りないのでブラウザ向けのインターフェイス
	を利用して API を実装
	- 実装した API
	  - gist-new
	  - gist-edit
	  - gist-delete
	  - gist-comment-add
	  - gist-update-description
	  - gist-star
	  - gist-unstar
	- 複数ファイルにはまだ対応していない

2010-07-27  MIYAMUKO Katsuyuki

	* api/network.l: 一応一通り動くようになった

	* api/gist.l: Gist API を定義。gist- だけで十分ユニークな名前なので
	関数名に github- をつけなかった。

2010-07-26  MIYAMUKO Katsuyuki

	* api/user.l, api/object.l, api/commit.l, api/issues.l: 一通り動くようになった。戻り値は要修正。

2010-07-24  MIYAMUKO Katsuyuki

	* とりあえず push

	* api/repo.l: 一応一通り動くようになった
	  - 戻り値はいまのところ JSON をそのまま返しているので修正が必要

2010-07-23  MIYAMUKO Katsuyuki

	* スクリプトの雛形修正

	* (form-value-bind): post データを生成するマクロ

	* api/repo.l: Repository API の半分まで実装してテスト
	  - github-repos-search
	  - github-repos-show
	  - github-repos-set
	  - github-repos-list
	    - ログイン中はプライベートなリポジトリも取得できるけど
	      プライベートなリポジトリを作るには有料プランにする必要がある
	  - github-repos-unwatch
	  - github-repos-watch
	  - github-repos-fork

2010-07-22  MIYAMUKO Katsuyuki

	* (define-github-api): マクロで生成した関数にはタグジャンプできないので却下

	* Develop.Github の markdown ファイル
	  http://develop.github.com/
	  http://github.com/develop/develop.github.com

	* scripts/genapi.rb: markdown から xyzzy lisp を生成するスクリプト

2010-07-18  MIYAMUKO Katsuyuki

	* low level な API は大体定義

	* GitHub API 自体はマクロで定義することにする
	  - (define-github-api github-repos-search "repos/search/:query")
	  - (defun github-repos-search (query &key since nomsg)
	      (github-get-json "repos/search/:q" `((:q . ,query)) :since since :nomsg nomsg))

2010-07-16  MIYAMUKO Katsuyuki

	* GitHub は Basic 認証が通らない?

	* (github-credential): git config を実行して github.login, github.token
	を取得する

	* (bind-params): シンプルな uri-template を書いた

2010-07-15  MIYAMUKO Katsuyuki

	* (process-output->string): (call-process "git") だと git.cmd を探してくれない
	  ed::shell-command-line を使って cmd.exe 経由で実行するようにした

2010-07-12  MIYAMUKO Katsuyuki

	* (process-output->string, process-output->string-list): コマンドを
	実行して結果を文字列または 1 行ごとのリストで受け取る関数。
	stdout, stderr, exit-status を多値で返す。
	使用は Gauche の同名の関数を参考にした。

2010-07-08  MIYAMUKO Katsuyuki

	* xl-github 作成開始
	  - リリースするまでは next ブランチは作らない
	  - github-mode, gist-mode と分けるため xl-github にした
	  - API は分速 60 回までで制限されるらしい
