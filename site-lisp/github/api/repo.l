; -*- mode: lisp; package: github -*-

;;; github/api/repo.l
;;
;; Copyright (c) 2010 MIYAMUKO Katsuyuki.
;;
;; Permission is hereby granted, free of charge, to any person obtaining
;; a copy of this software and associated documentation files (the
;; "Software"), to deal in the Software without restriction, including
;; without limitation the rights to use, copy, modify, merge, publish,
;; distribute, sublicense, and/or sell copies of the Software, and to
;; permit persons to whom the Software is furnished to do so, subject to
;; the following conditions:
;;
;; The above copyright notice and this permission notice shall be
;; included in all copies or substantial portions of the Software.
;;
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
;; NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
;; LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
;; OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
;; WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

;;; Code:

(eval-when (:compile-toplevel :load-toplevel :execute)
  (mc-require "github/api/base")
  )

(in-package :github)

(export '(search-repos
          show-repo
          update-repo
          list-repos
          unwatch-repo
          watch-repo
          fork-repo
          create-repo
          delete-repo
          set-repo-private
          set-repo-public
          list-repo-keys
          add-repo-key
          add-repo-key-file
          delete-repo-key
          show-repo-collaborators
          add-repo-collaborator
          delete-repo-collaborator
          list-pushable-repos
          list-repo-contributors
          list-repo-watchers
          list-repo-networks
          get-repo-language
          list-repo-tags
          list-repo-branches
          ))

;;; ## Repositories API ##

;;; ### Searching Repositories ###

;; http://github.com/search
(defun search-repos (query &key page lang callback nomsg)
  (check-type query string)
  (check-nullable-type page integer)
  (check-nullable-type lang string)
  (github-get "repos/search/:query"
              :uri-params (list query)
              :query-params `(("start_page" . ,page)
                              ("language" . ,lang))
              :return-type '(:root "repositories" :list t :object t :type searched-repo)
              :callback callback :nomsg nomsg))

; To search for repositories that have to do with testing ruby, you could do this:

; 	$ curl http://github.com/api/v2/yaml/repos/search/ruby+testing
; 	---
; 	repositories:
; 	- score: 0.32255203
; 	  name: synthesis
; 	  actions: 4653
; 	  size: 2048
; 	  language: Ruby
; 	  followers: 27
; 	  username: gmalamid
; 	  type: repo
; 	  id: repo-3555
; 	  forks: 1
; 	  fork: false
; 	  description: Ruby test code analysis tool employing a "Synthesized ....
; 	  pushed: "2009-01-08T13:45:06Z"
; 	  created: "2008-03-11T23:38:04Z"
; 	- score: 0.56515217
; 	  name: flexmock
; 	  actions: 210
; 	  size: 928
; 	  language: Ruby
; 	  followers: 7
; 	  username: jimweirich
; 	  type: repo
; 	  id: repo-41100
; 	  forks: 0
; 	  fork: false
; 	  description: Flexible mocking for Ruby testing
; 	  pushed: "2009-04-01T16:23:58Z"
; 	  created: "2008-08-08T18:52:54Z"

; You can pass a custom page number and/or a language to narrow the search:

;     $ curl http://github.com/api/v2/yaml/repos/search/ruby+testing?start_page=2
;     $ curl http://github.com/api/v2/yaml/repos/search/ruby+testing?language=Ruby

; Language searching is done with the capitalized format of the name: "Ruby", not "ruby".
; It takes the same values as the language drop down on [http://github.com/search](http://github.com/search).

;;; ### Show Repo Info ###

; To look at more in-depth information for a repository, GET this

(defun show-repo (owner/repo &key callback nomsg)
  (multiple-value-bind (user repo)
      (coerce-owner-and-repo owner/repo)
    (github-get "repos/show/:user/:repo"
                :uri-params (list user repo)
                :return-type '(:root "repository" :list nil :object t :type repo)
                :callback callback :nomsg nomsg)))

; For example, to see the information for Grit

; 	$ curl http://github.com/api/v2/yaml/repos/show/schacon/grit
;     ---
;     repository:
;       :name: grit
;       :owner: schacon
;       :source: mojombo/grit # The original repo at top of the pyramid
;       :parent: defunkt/grit # This repo's direct parent
;       :description: Grit is a Ruby library for extracting information from a
;       git repository in an object oriented manner - this fork tries to
;       intergrate as much pure-ruby functionality as possible
;       :forks: 4
;       :watchers: 67
;       :private: false
;       :url: http://github.com/schacon/grit
;       :fork: true
;       :homepage: http://grit.rubyforge.org/
;       :has_wiki: true
;       :has_issues: false
;       :has_downloads: true

; Some keys, such as `source` and `parent` are only available on the show repo
; action.  They won't show up on repo lists or searches.

;;; ### Set Repo Info ###

; If you are authenticated, you can update your repo's information by
; POSTing to it.

(defun update-repo (owner/repo &key
                              (description nil description-supplied-p)
                              (homepage nil homepage-supplied-p)
                              (wiki nil wiki-supplied-p)
                              (issue nil issue-supplied-p)
                              (download nil download-supplied-p)
                              callback nomsg)
  (multiple-value-bind (user repo)
      (coerce-owner-and-repo owner/repo)
    (check-nullable-type description string)
    (check-nullable-type homepage string)
    (form-value-bind (data)
        (progn
          (form2 "values[description]" description description-supplied-p owner/repo :description)
          (form2 "values[homepage]" homepage homepage-supplied-p owner/repo :homepage)
          (form2 "values[has_wiki]" wiki wiki-supplied-p owner/repo :has-wiki to-bool)
          (form2 "values[has_issues]" issue issue-supplied-p owner/repo :has-issues to-bool)
          (form2 "values[has_downloads]" download download-supplied-p owner/repo :has-downloads to-bool))
      (github-post "repos/show/:user/:repo"
                   :uri-params (list user repo)
                   :return-type '(:root "repository" :list nil :object t :type repo)
                   :data data
                   :callback callback :nomsg nomsg))))

;       :values[key] = value

; Where the POST values are of:

;     description
;     homepage
;     has_wiki
;     has_issues
;     has_downloads

; So, you could do this to update your repo's homepage:

;     $ curl -F 'login=schacon' -F 'token=XXX' https://github.com/api/v2/json/repos/show/schacon/grit -F 'values[homepage]=http://schacon.github.com/grit'
;     ---
;     repository:
;         :description: Grit is a Ruby library for extracting information from a
;         git repository in an object oriented manner - this fork tries to
;         intergrate as much pure-ruby functionality as possible
;         :forks: 4
;         :name: grit
;         :watchers: 67
;         :private: false
;         :url: http://github.com/schacon/grit
;         :fork: true
;         :owner: schacon
;         :homepage: http://schacon.github.com/grit
;         :has_wiki: true
;         :has_issues: false
;         :has_downloads: true


;;; ### List All Repositories ###

; You can list out all the repositories for a user with

(defun list-repos (user &key callback nomsg)
  (setf user (coerce-user-name user))
  (github-get "repos/show/:user"
              :uri-params (list user)
              :return-type '(:root "repositories" :list t :object t :type repo)
              :send-login-token t
              :callback callback :nomsg nomsg))

; For example, to see all of schacons public repos, we can GET

; 	$ curl http://github.com/api/v2/yaml/repos/show/schacon
; 	---
; 	repositories:
; 	- :description: Ruby/Git is a Ruby library that can be used to
; 	create, read and manipulate Git repositories by wrapping system
; 	calls to the git binary.
; 	  :forks: 30
; 	  :name: ruby-git
; 	  :watchers: 132
; 	  :private: false
; 	  :url: http://github.com/schacon/ruby-git
; 	  :fork: false
; 	  :owner: schacon
; 	  :homepage: http://jointheconversation.org/rubygit/
; 	- :description: A quick & dirty git-powered Sinatra wiki
; 	  :forks: 1
; 	  :name: git-wiki
; 	  :watchers: 15
; 	  :private: false
; 	  :url: http://github.com/schacon/git-wiki
; 	  :fork: true
; 	  :owner: schacon
; 	  :homepage: http://atonie.org/2008/02/git-wiki

; If you are authenticated as that user, you can see all the private repositories as well.

;;; ### Watching Repositories ###

; You have to be authenticated for this, but you can watch and unwatch repositories with calls to

(defun unwatch-repo (owner/repo &key callback nomsg)
  (multiple-value-bind (user repo)
      (coerce-owner-and-repo owner/repo)
    (github-get "repos/unwatch/:user/:repo"
                :uri-params (list user repo)
                :return-type '(:root "repository" :list nil :object t :type repo)
                :send-login-token t
                :callback callback :nomsg nomsg)))

(defun watch-repo (owner/repo &key callback nomsg)
  (multiple-value-bind (user repo)
      (coerce-owner-and-repo owner/repo)
    (github-get "repos/watch/:user/:repo"
                :uri-params (list user repo)
                :return-type '(:root "repository" :list nil :object t :type repo)
                :send-login-token t
                :callback callback :nomsg nomsg)))

;;; ### Forking Repositories ###

; You can also fork a repository with

(defun fork-repo (owner/repo &key callback nomsg)
  (multiple-value-bind (user repo)
      (coerce-owner-and-repo owner/repo)
    (github-get "repos/fork/:user/:repo"
                :uri-params (list user repo)
                :return-type '(:root "repository" :list nil :object t :type repo)
                :send-login-token t
                :callback callback :nomsg nomsg)))

; Which will return data about your newly forked repository.

; 	curl -F 'login=schacon' -F 'token=XXX' http://github.com/api/v2/yaml/repos/fork/dim/retrospectiva
; 	---
; 	repository:
; 	  :description: Retrospectiva is an open source, web-based, project management and bug-tracking tool. It is intended to assist the collaborative aspect of work carried out by software development teams.
; 	  :forks: 0
; 	  :name: retrospectiva
; 	  :watchers: 1
; 	  :private: false
; 	  :url: http://github.com/schacon/retrospectiva
; 	  :fork: true
; 	  :owner: schacon
; 	  :homepage: http://www.retrospectiva.org

;;; ### Creating and Deleting Repositories ###

; To create a new repository, hit this url

(defun create-repo (name &key
                         (description nil description-supplied-p)
                         (homepage nil homepage-supplied-p)
                         (public nil public-supplied-p)
                         callback nomsg)
  (check-type name string)
  (check-nullable-type description string)
  (check-nullable-type homepage string)
  (form-value-bind (data)
      (progn
        (form "name" name t)
        (form "description" description description-supplied-p)
        (form "homepage" homepage homepage-supplied-p)
        (form "public" (to-one-or-zero public) public-supplied-p))
    (github-post "repos/create"
                 :data data
                 :return-type '(:root "repository" :list nil :object t :type repo)
                 :callback callback :nomsg nomsg)))

; with at least 'name' but it will take any of these as POST args

; 	name 		=> name of the repository
; 	description 	=> repo description
; 	homepage	=> homepage url
; 	public		=> 1 for public, 0 for private

; You can also delete a repository with a POST to

(defun delete-repo (repo &key callback nomsg)
  (setf repo (coerce-repo-name repo))
  (labels ((delete1 ()
             (github-post "repos/delete/:repo"
                          :uri-params (list repo)
                          :return-type `(:root "delete_token" :object nil)
                          :callback #'delete2
                          :async (not (null callback))
                          :nomsg nomsg))
           (delete2 (token)
             (cond (token
                    (github-post "repos/delete/:repo"
                                 :uri-params (list repo)
                                 :data `(("delete_token" . ,token))
                                 :return-type `(:root "status" :object nil)
                                 :callback (compose callback (cut string= "deleted" <>))
                                 :async (not (null callback))
                                 :nomsg nomsg))
                   (callback
                    (funcall callback token)))))
    (delete1)))

; which will give you back a token in the 'delete\_token' field of the response, which you then have to post back to the same url again (in the 'delete\_token' POST var) to complete the deletion.

;;; ### Repository Visibility ###

; To set a public repository private, you can POST while authenticated to

(defun set-repo-private (repo &key callback nomsg)
  (setf repo (coerce-repo-name repo))
  (github-get "repos/set/private/:repo"
              :uri-params (list repo)
              :return-type '(:root "repository" :list nil :object t :type repo)
              :send-login-token t
              :callback callback :nomsg nomsg))

; To make a private repo public, POST while authenticated to

(defun set-repo-public (repo &key callback nomsg)
  (setf repo (coerce-repo-name repo))
  (github-get "repos/set/public/:repo"
              :uri-params (list repo)
              :return-type '(:root "repository" :list nil :object t :type repo)
              :send-login-token t
              :callback callback :nomsg nomsg))

;;; ### Deploy Keys ###

; You can use the API to list, add and remove your deploy keys.  To see which deploy keys you have setup for a specific repository, GET this URL

(defun list-repo-keys (repo &key callback nomsg)
  (setf repo (coerce-repo-name repo))
  (github-get "repos/keys/:repo"
              :uri-params (list repo)
              :return-type '(:root "public_keys" :list t :object t :type public-key)
              :send-login-token t
              :callback callback :nomsg nomsg))

; It will give you a listing of your public keys, like so

; 	$ curl -F 'login=schacon' -F 'token=XXX' http://github.com/api/v2/yaml/repos/keys/retrospectiva
; 	---
; 	public_keys:
; 	- title: my deploy key
; 	  id: 98748
; 	  key: ssh-rsa AAAAB3NzaC1cy3EAAAABIwAAAQEAqxtaIQhX9ICzxJw2ct+MuEEo8T6w
; 	6woAwOHGuz9tZVZ1ncIa641O+z9hHJ68g61OK508M4Z6mkVNL68bW7TCPcTEXcCmkGTbB9F
; 	5wCWD5uYExRgDaywamaREkEzaP0wl3CFvGADfrxUUvEzp4eKsAneCHD07FQiBXDFApqfJEm
; 	IcsXPaJKfl8NpyIAMLr9ge2ToKH7hDOQG5Q6UcYIfYZH0kIZFfhnf8tBp+6oIHNFkXriTRB
; 	OxFKoCuyauVCnX12N7GUR29L//MWmbL+bDdEg/HHnmZWkwpaZhC/rsqqylZobpZsUcAKZ7f
; 	0Daq6H8C1CHf1RB6JriP7CCja8pl+w==

; You can also add new keys by POSTing to

(defun add-repo-key-file (repo title key-file &key callback nomsg)
  (let ((key (read-public-key key-file)))
    (add-repo-key repo title key :callback callback :nomsg nomsg)))

(defun add-repo-key (repo title key &key callback nomsg)
  (setf repo (coerce-repo-name repo))
  (check-type title string)
  (check-type key string)
  (form-value-bind (data)
      (progn
        (form "title" title t)
        (form "key" key t))
    (github-post "repos/key/:repo/add"
                 :uri-params (list repo)
                 :return-type '(:root "public_keys" :list t :object t :type public-key)
                 :data data
                 :callback callback :nomsg nomsg)))

; which takes the following POST variables

; 	title 	=> title of the key
; 	key	=> public key data

; You can also POST to this removal URL to remove a key

(defun delete-repo-key (repo key-id &key callback nomsg)
  (setf repo (coerce-repo-name repo))
  (setf key-id (coerce-public-key-id key-id))
  (form-value-bind (data)
      (form "id" key-id t)
    (github-post "repos/key/:repo/remove"
                 :uri-params (list repo)
                 :return-type '(:root "public_keys" :list t :object t :type public-key)
                 :data data
                 :callback callback :nomsg nomsg)))

; You will need to POST an 'id' variable with the key ID returned from the public listing or key creation.

;;; ### Collaborators ###

; To get a list of the collaborators on your project, GET

(defun list-repo-collaborators (owner/repo &key callback nomsg)
  (multiple-value-bind (user repo)
      (coerce-owner-and-repo owner/repo)
    (github-get "repos/show/:user/:repo/collaborators"
                :uri-params (list user repo)
                :return-type '(:root "collaborators" :object nil :list t)
                :callback callback :nomsg nomsg)))

; To add or remove collaborators, POST to one of these URLs

(defun add-repo-collaborator (repo user &key callback nomsg)
  (setf repo (coerce-repo-name repo))
  (setf user (coerce-user-name user))
  (github-post "repos/collaborators/:repo/add/:user"
               :uri-params (list repo user)
               :return-type '(:root "collaborators" :object nil :list t)
               :callback callback :nomsg nomsg))

(defun delete-repo-collaborator (repo user &key callback nomsg)
  (setf repo (coerce-repo-name repo))
  (setf user (coerce-user-name user))
  (github-post "repos/collaborators/:repo/remove/:user"
               :uri-params (list repo user)
               :return-type '(:root "collaborators" :object nil :list t)
               :callback callback :nomsg nomsg))

; To get a list of repos you can push to that are not your own, GET

(defun list-pushable-repos (&key callback nomsg)
  (github-get "repos/pushable"
              :return-type '(:root "repositories" :object t :list t :type repo)
              :send-login-token t
              :callback callback :nomsg nomsg))

;;; ### Contributors ###

; To get a list of the contributors on your project, GET

(defun list-repo-contributors (owner/repo &key callback nomsg)
  (multiple-value-bind (user repo)
      (coerce-owner-and-repo owner/repo)
    (github-get "repos/show/:user/:repo/contributors"
                :uri-params (list user repo)
                :return-type '(:root "contributors" :object t :list t :type contributor)
                :callback callback :nomsg nomsg)))

; The data comes back as an array of [login, count], sorted by the biggest contributors to the repository.

;     $ curl http://github.com/api/v2/yaml/repos/show/mxcl/homebrew/contributors
;     ---
;     contributors:
;     - :location: London, UK
;       :blog: http://www.methylblue.com
;       :company: TweetDeck
;       :login: mxcl
;       :contributions: 742
;       :name: Max Howell
;       :email: max@methylblue.com
;     - :location: Issaquah, WA
;       :blog: http://adamv.com/
;       :login: adamv
;       :contributions: 607
;       :name: Adam Vandenberg
;       :email: flangy@gmail.com

; By default, the list only shows GitHub users.  You can include non-users too:

;     $ curl http://github.com/api/v2/yaml/repos/show/mxcl/homebrew/contributors/anon
;     ---
;     contributors:
;     - :location: London, UK
;       :blog: http://www.methylblue.com
;       :company: TweetDeck
;       :login: mxcl
;       :contributions: 742
;       :name: Max Howell
;       :email: max@methylblue.com
;     - :contributions: 1
;       :name: Bart Janssen


;;; ### Watchers ###

; To get a list of the watchers on your project, GET

(defun list-repo-watchers (owner/repo &key callback nomsg)
  (multiple-value-bind (user repo)
      (coerce-owner-and-repo owner/repo)
    (github-get "repos/show/:user/:repo/watchers"
                :uri-params (list user repo)
                :return-type '(:root "watchers" :object nil :list t)
                :callback callback :nomsg nomsg)))

; The data comes back as an array of watchers, sorted by the date they started watching the repository.

;     $ curl http://github.com/api/v2/yaml/repos/show/claudiob/csswaxer/watchers
;     ---
;     watchers:
;     - claudiob
;     - vlex

;;; ### Network ###

; We can also look at the full network with

(defun list-repo-networks (owner/repo &key callback nomsg)
  (multiple-value-bind (user repo)
      (coerce-owner-and-repo owner/repo)
    (github-get "repos/show/:user/:repo/network"
                :uri-params (list user repo)
                :return-type '(:root "network" :object t :list t :type repo)
                :callback callback :nomsg nomsg)))

; For example, to see all the forks of the ruby-git project, we can GET

; 	$ curl http://github.com/api/v2/yaml/repos/show/schacon/ruby-git/network
; 	---
; 	network:
; 	- :description: Ruby/Git is a Ruby library that can be used to create,
; 	 read and manipulate Git repositories by wrapping system calls to the
; 	 git binary.
; 	  :forks: 30
; 	  :name: ruby-git
; 	  :watchers: 132
; 	  :private: false
; 	  :url: http://github.com/schacon/ruby-git
; 	  :fork: false
; 	  :owner: schacon
; 	  :homepage: http://jointheconversation.org/rubygit/
; 	- :description: Ruby/Git is a Ruby library that can be used to create,
; 	 read and manipulate Git repositories.
; 	  :forks: 0
; 	  :name: ruby-git
; 	  :watchers: 2
; 	  :private: false
; 	  :url: http://github.com/ericgoodwin/ruby-git
; 	  :fork: true
; 	  :owner: ericgoodwin
; 	  :homepage: http://jointheconversation.org/rubygit/
; 	...

;;; ### Language Breakdown ###

; To see a list of the languages used in a particular repository, you can call
; the language breakdown API.  Values are in bytes calculated.

(defun get-repo-language (owner/repo &key callback nomsg)
  (multiple-value-bind (user repo)
      (coerce-owner-and-repo owner/repo)
    (github-get "repos/show/:user/:repo/languages"
                :uri-params (list user repo)
                :return-type '(:root "languages" :object nil :list t)
                :callback callback :nomsg nomsg)))

; You can get the language breakdown for mojombo/grit like this:

; 	$ curl http://github.com/api/v2/yaml/repos/show/mojombo/grit/languages
; 	---
; 	languages:
; 	  Ruby: 35097

; Note that this is based on a very simple algorithm and is not perfect.  Common
; large libraries are removed and languages are solely identified by file
; extension.

;;; ### Repository Refs ###

; To get a list of tags on your repo

(defun list-repo-tags (owner/repo &key callback nomsg)
  (multiple-value-bind (user repo)
      (coerce-owner-and-repo owner/repo)
    (github-get "repos/show/:user/:repo/tags"
                :uri-params (list user repo)
                :return-type '(:root "tags" :object nil :list t)
                :callback callback :nomsg nomsg)))

; For example

; 	$ curl http://github.com/api/v2/yaml/repos/show/schacon/ruby-git/tags
; 	---
; 	tags:
; 	  1.0.3: be47ad8aea4f854fc2d6773456fb28f3e9f519e7
; 	  1.0.5: 6c4af60f5fc5193b956a4698b604ad96ef3c51c6
; 	  1.0.5.1: ae106e2a3569e5ea874852c613ed060d8e232109
; 	  v1.0.7: 1adc5b8136c2cd6c694629947e1dbc49c8bffe6a

; To get a list of remote branches

(defun list-repo-branches (owner/repo &key callback nomsg)
  (multiple-value-bind (user repo)
      (coerce-owner-and-repo owner/repo)
    (github-get "repos/show/:user/:repo/branches"
                :uri-params (list user repo)
                :return-type '(:root "branches" :object nil :list t)
                :callback callback :nomsg nomsg)))

; For example

; 	$ curl http://github.com/api/v2/yaml/repos/show/schacon/ruby-git/branches
; 	---
; 	branches:
; 	  master: ee90922f3da3f67ef19853a0759c1d09860fe3b3
; 	  internals: 6a9db968e8563bc27b8f56f9d413159a2e14cf67
; 	  test: 2d749e3aa69d7bfedf814f59618f964fdbc300d5
; 	  integrate: 10b880b418879e662feb91ce7af98560adeaa8bb



(provide "github/api/repo")

;;; End
